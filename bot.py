import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("8014426625:AAFguwZOWffOOKOz5mxK3qPpumCP4R0_gF8")
CHANNEL_ID = "@hatasoloda"

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
servers = {
    "ü´õPodolsk": "",
    "üí•Surgut": "",
    "üòæIzhevsk": "",
    "üèçÔ∏èTver": "",
    "üõûTomsk": "",
    "ü•äVologda": "",
    "ü´êTaganrog": "",
    "üåºN.Novgorod": "",
    "üå∏Kaluga": "",
    "üé≠Vladimir": "",
    "ü¶ÜKostroma": "",
    "ü¶éChita": "",
    "üß£Astrakhan": "",
    "üëúBratsk": "",
    "ü•êTambov": "",
    "ü•ΩYakutsk": "",
    "üç≠Ulyanovsk": "",
    "üéàLipetsk": "",
    "üí¶Barnaul": "",
    "üèõYaroslavl": "",
    "ü¶ÖOrel": "",
    "üß∏Bryansk": "",
    "ü™≠Pskov": "",
    "ü´öSmolensk": "",
    "ü™ºStavropol": "",
    "ü™ÖIvanovo": "",
    "ü™∏Tolyatti": "",
    "üêãTyumen": "",
    "üå∫Kemerovo": "",
    "üî´Kirov": "",
    "üçñOrenburg": "",
    "ü•ãArkhangelsk": "",
    "üÉèKursk": "",
    "üé≥Murmansk": "",
    "üé∑Penza": "",
    "üé≠Ryazan": "",
    "‚õ≥Tula": "",
    "üèüPerm": "",
    "üê®Khabarovsk": "",
    "ü™ÑCheboksary": "",
    "üñáKrasnoyarsk": "",
    "üïäChelyabinsk": "",
    "üëíKaliningrad": "",
    "üß∂Vladivostok": "",
    "üåÇVladikavkaz": "",
    "‚õëÔ∏èMakhachkala": "",
    "üéìBelgorod": "",
    "üëëVoronezh": "",
    "üéíVolgograd": "",
    "üå™Irkutsk": "",
    "ü™ôOmsk": "",
    "üêâSaratov": "",
    "üçôGrozny": "",
    "üçÉNovosib": "",
    "ü™øArzamas": "",
    "ü™ªKrasnodar": "",
    "üìóEkb": "",
    "ü™∫Anapa": "",
    "üç∫Rostov": "",
    "üéßSamara": "",
    "üèõKazan": "",
    "üåäSochi": "",
    "üå™Ufa": "",
    "üåâSpb": "",
    "üåáMoscow": "",
    "ü§éChoco": "",
    "üìïChilli": "",
    "‚ùÑIce": "",
    "üììGray": "",
    "üìòAqua": "",
    "ü©∂Platinum": "",
    "üíôAzure": "",
    "üíõGold": "",
    "‚ù§‚Äçüî•Crimson": "",
    "ü©∑Magenta": "",
    "ü§çWhite": "",
    "üíúIndigo": "",
    "üñ§Black": "",
    "üçíCherry": "",
    "üíïPink": "",
    "üçãLime": "",
    "üíúPurple": "",
    "üß°Orange": "",
    "üíõYellow": "",
    "üíôBlue": "",
    "üíöGreen": "",
    "‚ù§Ô∏èRed": ""
}

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
categories = ["–ï–ì–ê", "–ì–∞—Ä–∞–∂ –ë–£–°", "–ì–∞—Ä–∞–∂ –ê–†–ó", "–ë–ê–¢ –í–ß", "–ë–ê–¢ —Ñ–µ—Ä–º–∞", "–ì–ê–†", "–ù–ò–ñ", "–ï–ì–ê –ë–ì", "–ï–ì–ê –°–ì", "–ö–û–†", "–ë–£–°"]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("üìú –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫"), KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"))

server_kb = ReplyKeyboardMarkup(resize_keyboard=True)
for server in servers.keys():
    server_kb.add(KeyboardButton(server))

category_kb = ReplyKeyboardMarkup(resize_keyboard=True)
for category in categories:
    category_kb.add(KeyboardButton(category))


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def check_subscription(user_id):
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception:
        return False


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if not await check_subscription(message.from_user.id):
        await message.answer("‚ùó –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞: https://t.me/hatasoloda")
        return
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)


@dp.message_handler(lambda message: message.text == "üìú –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫")
async def show_list(message: types.Message):
    text = "\n".join([f"{name} - {info}" for name, info in servers.items()])
    await message.answer(f"üìú –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫:\n\n{text}")


@dp.message_handler(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
async def choose_server(message: types.Message):
    if not await check_subscription(message.from_user.id):
        await message.answer("‚ùó –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞: https://t.me/hatasoloda")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:", reply_markup=server_kb)


@dp.message_handler(lambda message: message.text in servers.keys())
async def choose_category(message: types.Message):
    global selected_server
    selected_server = message.text
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_server}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_kb)


@dp.message_handler(lambda message: message.text in categories)
async def add_info(message: types.Message):
    global selected_server
    servers[selected_server] += f"{message.text}, "
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {message.text} –≤ {selected_server}!", reply_markup=main_kb)
    await check_auto_broadcast()


# –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞
user_data = {}
broadcast_threshold = 20


async def check_auto_broadcast():
    total_entries = sum(len(info.split(", ")) for info in servers.values())
    if total_entries >= broadcast_threshold:
        message_text = "üì¢ –í–∞–∂–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!\n\n" + "\n".join([f"{name} - {info}" for name, info in servers.items()])
        await send_broadcast(message_text)
        clear_data()


async def send_broadcast(text):
    for user_id in user_data.keys():
        try:
            await bot.send_message(user_id, text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


def clear_data():
    for key in servers.keys():
        servers[key] = ""


async def schedule_daily_broadcast():
    while True:
        now = asyncio.get_event_loop().time()
        target_time = now + (4.5 * 3600)  # 04:30 –ú–°–ö
        await asyncio.sleep(target_time - now)
        message_text = "üì¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç!\n\n" + "\n".join([f"{name} - {info}" for name, info in servers.items()])
        await send_broadcast(message_text)
        clear_data()


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(schedule_daily_broadcast())
    executor.start_polling(dp, skip_updates=True)
